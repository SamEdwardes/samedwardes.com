---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";
import BrutalCard from "./BrutalCard.astro";

export interface Props {
  headings: {
    slug: string;
    text: string;
    depth: number;
  }[];
}

const { headings } = Astro.props;

export interface TocHeading {
  depth: number;
  slug: string;
  text: string;
  subheadings: TocHeading[];
}

function buildToc(headings: Props["headings"]): TocHeading[] {
  const toc: TocHeading[] = [];
  const parentHeadings = new Map<number, TocHeading>();
  headings.forEach((h) => {
    const heading: TocHeading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      const parent = parentHeadings.get(heading.depth - 1);
      if (parent) {
        parent.subheadings.push(heading);
      }
    }
  });
  return toc;
}

const tableOfContentsData = buildToc(headings);
---

<nav>
  <BrutalCard>
    <div class="font-bold">Table of contents</div>
    <ul class="list-disc list-outside px-4">
      {
        tableOfContentsData.map((heading) => (
          <TableOfContentsHeading
            heading={heading}
            leftPadding={false}
            active={heading === tableOfContentsData[0]}
          />
        ))
      }
    </ul>
  </BrutalCard>
</nav>

<script>
  // Script to handle the active state of TOC items
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute("id");
          console.log("entry id", id);
          const tocLink = document.querySelector(
            `.toc-link[data-heading="${id}"]`,
          );
          console.log(tocLink);

          if (entry.isIntersecting) {
            // Remove active class from all links
            document.querySelectorAll(".toc-link").forEach((link) => {
              link.classList.remove("active");
            });

            // Add active class to current link
            if (tocLink) {
              tocLink.classList.add("active");
            }
          }
        });
      },
      {
        rootMargin: "-100px 0px -80% 0px",
        threshold: 0,
      },
    );

    // Observe all headings that are in the TOC
    document.querySelectorAll("h2, h3").forEach((heading) => {
      observer.observe(heading);
    });
  });
</script>
