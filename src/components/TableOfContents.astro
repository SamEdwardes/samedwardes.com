---
import TableOfContentsHeading from "./TableOfContentsHeading.astro";
import BrutalCard from "./BrutalCard.astro";

export interface Props {
  headings: {
    slug: string;
    text: string;
    depth: number;
  }[];
}

const { headings } = Astro.props;

export interface TocHeading {
  depth: number;
  slug: string;
  text: string;
  subheadings: TocHeading[];
}

function buildToc(headings: Props["headings"]): TocHeading[] {
  const toc: TocHeading[] = [];
  const parentHeadings = new Map<number, TocHeading>();
  headings.forEach((h) => {
    const heading: TocHeading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      const parent = parentHeadings.get(heading.depth - 1);
      if (parent) {
        parent.subheadings.push(heading);
      }
    }
  });
  return toc;
}

const tableOfContentsData = buildToc(headings);
---

<nav>
  <BrutalCard>
    <div class="font-bold">Table of contents</div>
    <ul class="list-disc list-outside px-4">
      {
        tableOfContentsData.map((heading) => (
          <TableOfContentsHeading heading={heading} leftPadding={false} />
        ))
      }
    </ul>
  </BrutalCard>
</nav>
