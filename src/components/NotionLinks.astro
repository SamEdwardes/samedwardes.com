---
// Render this on the server.
export const prerender = false;

import { Client, isFullPage } from "@notionhq/client";

// -----------------------------------------------------------------------------
// Define types
// -----------------------------------------------------------------------------


export interface PageLink {
  id: string
  created_time: Date
  publiclyVisible: boolean
  title: string
  url: string
  base_url: string
  tags: string[]
  description?: string
}



// -----------------------------------------------------------------------------
// Call Notion API
// -----------------------------------------------------------------------------
const notion = new Client({
  auth: process.env.NOTION_TOKEN,
});

const fullOrPartialPages = await notion.databases.query({
  // Webclips URL: https://www.notion.so/samedwardes/18594cc9dbcb4ca6984984f6beb03b81?v=bcb531df9d15439eb5130e8723583f6c&pvs=4
  database_id: "18594cc9dbcb4ca6984984f6beb03b81",
  filter: {
    property: "Public",
    checkbox: {
      equals: true,
    },
  },
});

// -----------------------------------------------------------------------------
// Extract data from Notion API response
// -----------------------------------------------------------------------------

const pageLinks = fullOrPartialPages.results.map((page) => {
  if (!isFullPage(page)) {
    return;
  }

  // public
  if (page.properties.Public.type === "checkbox") {
    var publiclyVisible = page.properties.Public.checkbox
  } else {
    throw new Error("Public property is not a checkbox")
  }

  // title
  if (page.properties.Name.type === "title") {
    var title = page.properties.Name.title[0]?.plain_text
  } else {
    throw new Error("Name property is not a title")
  }

  // url
  if (page.properties.URL.type === "url") {
    if (page.properties.URL.url === null) {
      throw new Error("URL property is null")
    }
    var linkURL = page.properties.URL.url
  } else {
    throw new Error("Name property is not a title")
  }

  // base_url
  if (page.properties["Base URL"].type === "formula") {
    if (page.properties["Base URL"].formula.type === "string") {
      if (page.properties["Base URL"].formula.string === null) {
        throw new Error("Base URL property is null")
      }
      var base_url = page.properties["Base URL"].formula.string
    }
    else {
      throw new Error("Base URL property is not a string")
    }
  } else {
    throw new Error("Base URL property is not a formula")
  }

  // tags
  if (page.properties["Public Tags"].type === "multi_select") {
    var tags = page.properties["Public Tags"].multi_select.map((tag) => {
      return tag.name
    })
  } else {
    throw new Error("Tags property is not a multi_select")
  }

  // public description
  if (page.properties["Public Description"].type === "rich_text") {
    var description = page.properties["Public Description"].rich_text[0]?.plain_text
  } else {
    throw new Error("Public Description property is not a rich_text")
  }

  const link: PageLink = {
    id: page.id,
    created_time: new Date(page.created_time),
    publiclyVisible: publiclyVisible,
    title: title,
    url: linkURL,
    base_url: base_url,
    tags: tags,
    description: description,
  }

  return link

});

---

<div>
  { pageLinks.map((page) => {
    if (!page) {
      return
    }
    return (
      <div>
        <h2>{page.title}</h2>
      </div>
    )
  })}
</div>
